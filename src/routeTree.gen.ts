/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

import { Route as rootRouteImport } from './routes/__root'
import { Route as RootRouteImport } from './routes/_root'
import { Route as RootIndexRouteImport } from './routes/_root.index'
import { Route as authAuthRouteImport } from './routes/(auth)/_auth'
import { Route as authAuthRegisterRouteImport } from './routes/(auth)/_auth.register'
import { Route as authAuthLoginRouteImport } from './routes/(auth)/_auth.login'

const authRouteImport = createFileRoute('/(auth)')()

const authRoute = authRouteImport.update({
  id: '/(auth)',
  getParentRoute: () => rootRouteImport,
} as any)
const RootRoute = RootRouteImport.update({
  id: '/_root',
  getParentRoute: () => rootRouteImport,
} as any)
const RootIndexRoute = RootIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => RootRoute,
} as any)
const authAuthRoute = authAuthRouteImport.update({
  id: '/_auth',
  getParentRoute: () => authRoute,
} as any)
const authAuthRegisterRoute = authAuthRegisterRouteImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => authAuthRoute,
} as any)
const authAuthLoginRoute = authAuthLoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => authAuthRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof RootIndexRoute
  '/login': typeof authAuthLoginRoute
  '/register': typeof authAuthRegisterRoute
}
export interface FileRoutesByTo {
  '/': typeof RootIndexRoute
  '/login': typeof authAuthLoginRoute
  '/register': typeof authAuthRegisterRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_root': typeof RootRouteWithChildren
  '/(auth)': typeof authRouteWithChildren
  '/(auth)/_auth': typeof authAuthRouteWithChildren
  '/_root/': typeof RootIndexRoute
  '/(auth)/_auth/login': typeof authAuthLoginRoute
  '/(auth)/_auth/register': typeof authAuthRegisterRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/login' | '/register'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/login' | '/register'
  id:
    | '__root__'
    | '/_root'
    | '/(auth)'
    | '/(auth)/_auth'
    | '/_root/'
    | '/(auth)/_auth/login'
    | '/(auth)/_auth/register'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  RootRoute: typeof RootRouteWithChildren
  authRoute: typeof authRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/(auth)': {
      id: '/(auth)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof authRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_root': {
      id: '/_root'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof RootRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_root/': {
      id: '/_root/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof RootIndexRouteImport
      parentRoute: typeof RootRoute
    }
    '/(auth)/_auth': {
      id: '/(auth)/_auth'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof authAuthRouteImport
      parentRoute: typeof authRoute
    }
    '/(auth)/_auth/register': {
      id: '/(auth)/_auth/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof authAuthRegisterRouteImport
      parentRoute: typeof authAuthRoute
    }
    '/(auth)/_auth/login': {
      id: '/(auth)/_auth/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof authAuthLoginRouteImport
      parentRoute: typeof authAuthRoute
    }
  }
}

interface RootRouteChildren {
  RootIndexRoute: typeof RootIndexRoute
}

const RootRouteChildren: RootRouteChildren = {
  RootIndexRoute: RootIndexRoute,
}

const RootRouteWithChildren = RootRoute._addFileChildren(RootRouteChildren)

interface authAuthRouteChildren {
  authAuthLoginRoute: typeof authAuthLoginRoute
  authAuthRegisterRoute: typeof authAuthRegisterRoute
}

const authAuthRouteChildren: authAuthRouteChildren = {
  authAuthLoginRoute: authAuthLoginRoute,
  authAuthRegisterRoute: authAuthRegisterRoute,
}

const authAuthRouteWithChildren = authAuthRoute._addFileChildren(
  authAuthRouteChildren,
)

interface authRouteChildren {
  authAuthRoute: typeof authAuthRouteWithChildren
}

const authRouteChildren: authRouteChildren = {
  authAuthRoute: authAuthRouteWithChildren,
}

const authRouteWithChildren = authRoute._addFileChildren(authRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  RootRoute: RootRouteWithChildren,
  authRoute: authRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
